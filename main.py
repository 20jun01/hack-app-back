# generated by fastapi-codegen:
#   filename:  YNotes.openapi.yaml
#   timestamp: 2024-05-14T01:04:48+00:00

from __future__ import annotations

from typing import Optional

from fastapi import FastAPI, Path, UploadFile, Depends
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager

from app import (
    NotesCategoriesCategoryIdGetResponse,
    NotesCategoriesGetResponse,
    NotesGetResponse,
    NotesPostResponse,
    NotesTagsPatchRequest,
    NotesTagsPatchResponse,
    NotesTagsPostRequest,
    NotesTagsPostResponse,
    Database,
    Config,
)


class Main:
    def __init__(self):
        config = Config()
        self.db = Database(
            config.DB_HOST, config.DB_NAME, config.DB_USER, config.DB_PASSWORD
        )

        self.app = FastAPI(
            title="YNotes",
            description="",
            version="1.0.0",
        )

        origins = [
            "http://localhost:8080",
            "http://localhost:8080/",
        ]

        self.app.add_middleware(
            CORSMiddleware,
            allow_origins=origins,
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )

        @asynccontextmanager
        async def lifespan(app: FastAPI):
            self.db.migrate()
            yield

        self.app.router.lifespan_context = lifespan

        @self.app.get("/notes", response_model=NotesGetResponse)
        def get_notes(
            keyword: Optional[str] = None,
            db_session=Depends(self.db.get_db_session),
        ) -> NotesGetResponse:
            """
            検索
            """
            return NotesGetResponse(
                note={
                    "title": "title",
                    "content": "content",
                    "summary": "summary",
                    "subCategories": ["subCategories"],
                    "comments": ["comments"],
                }
            )

        @self.app.post("/notes", response_model=NotesPostResponse)
        def post_notes(
            file: UploadFile,
            db_session=Depends(self.db.get_db_session),
        ) -> NotesPostResponse:
            """
            解析
            """
            return NotesPostResponse(noteId="noteId", tags=["tags"])

        @self.app.get("/notes/categories", response_model=NotesCategoriesGetResponse)
        def get_notes_categories(
            db_session=Depends(self.db.get_db_session),
        ) -> NotesCategoriesGetResponse:
            """
            分類取得
            """
            return NotesCategoriesGetResponse(categories=["categories"])

        @self.app.get(
            "/notes/categories/{categoryId}",
            response_model=NotesCategoriesCategoryIdGetResponse,
        )
        def get_notes_categories_category_id(
            category_id: str = Path(..., alias="categoryId"),
            db_session=Depends(self.db.get_db_session),
        ) -> NotesCategoriesCategoryIdGetResponse:
            """
            副分類取得
            """
            return NotesCategoriesCategoryIdGetResponse(categories=["categories"])

        @self.app.post(
            "/notes/tags",
            response_model=NotesTagsPostResponse,
        )
        def post_notes_tags(
            body: NotesTagsPostRequest = None,
            db_session=Depends(self.db.get_db_session),
        ) -> NotesTagsPostResponse:
            """
            タグ追加
            """
            return NotesTagsPostResponse()

        @self.app.patch(
            "/notes/tags",
            response_model=NotesTagsPatchResponse,
        )
        def patch_notes_tags(
            body: NotesTagsPatchRequest = None,
            db_session=Depends(self.db.get_db_session),
        ) -> NotesTagsPatchResponse:
            """
            タグ更新
            """
            return NotesTagsPatchResponse()


if __name__ == "__main__":
    import uvicorn

    main = Main()
    uvicorn.run(main.app, host="0.0.0.0", port=8000)
